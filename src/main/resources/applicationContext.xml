<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:contex="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!-- 3.开启Springmvc注解模式   -->
    <!-- spring框架启动注解模式,配置包扫描,在容器初始化时对包下添加注解的类进行实例化 -->
    <context:component-scan base-package="com.imooc"/>
    <!-- mvc开启注解模式, 使用mvc的注解:诸如 getMapping postMapping-->
    <mvc:annotation-driven>
        <!-- 消息转换器 -->
        <mvc:message-converters>
            <!-- 管理响应输出的字符集 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <!-- 将响应产生的结果按照utf-8进行转换后再http格式文本进行解析
                            没有使用freemarker模板引擎直接通过响应输出的时候生效.
                            最典型的应用场景：client 通过ajax向服务器提交请求,由服务器直接产生JSON字符串返回的时候。
                            注意比较与freemarker中配置的区别
                         -->
                        <value>text/html;charset=utf-8</value>
                        <!-- 6. JSON 也要进行编码转换 -->
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 将诸如css js 图片等静态资源排除在外, 提高url的处理效率-->
    <mvc:default-servlet-handler/>

    <!-- 5.配置Freemarker模板引擎 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <!-- templateLoaderPath指向服务器去加载哪个目录,就是freemarker脚本存放的地址 -->
        <property name="templateLoaderPath" value="/WEB-INF/ftl"/>
        <!-- 针对freemarker本身需要配置的参数 -->
        <property name="freemarkerSettings">
            <props>
                <!-- 默认的编码类型,指读取文件采用utf-8编码,避免脚本内部出现中文乱码问题 -->
                <prop key="defaultEncoding">UTF-8</prop>
            </props>
        </property>
    </bean>
    <!-- 配置freemarker视图解析器 强制规定id为：ViewResolver -->
    <bean id="ViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <!-- 视图解析器将数据模板引擎结合所产生的新的html片段 响应输出时设置contextType为: text/html;charset=utf-8
            场景是springmvc加载freemarker产出html片段返回数据的时候所使用的
        -->
        <property name="contentType" value="text/html;charset=utf-8"/>
        <!-- 配置要加载的模板引擎的扩展名 -->
        <property name="suffix" value=".ftl"/>
    </bean>
</beans>